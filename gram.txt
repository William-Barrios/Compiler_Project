Program ::= Declaration Program'               
Program' ::= Declaration Program' 
Program' ::= ''
AUX ::= Type Identifier
VarDecl ::= = Expression VarDecl'
VarDecl ::= VarDecl'
VarDecl' ::= ;
Declaration ::= AUX  PRAG
Function ::=  ( Params ) { StmtList }
Type ::= BaseType Type'                         
BaseType ::= IntType
BaseType ::= BoolType 
BaseType ::= CharType 
BaseType ::= StringType 
BaseType ::= Void
Type' ::= [ ] Type'
Type' ::= ''
PRAG ::= VarDecl
PRAG ::= Function
Params ::= Type Identifier Params'
Params' ::= , Params 
Params' ::= ''         
StmtList ::= Statement StmtList'              
StmtList' ::= Statement StmtList' 
StmtList' ::= ''
Statement ::= VarDecl 
Statement ::= IfStmt 
Statement ::= ForStmt 
Statement ::= ReturnStmt
Statement ::= ExprStmt 
Statement ::= PrintStmt 
Statement ::= { StmtList }
IfStmt ::= if (Expression) Statement else Statement
ForStmt ::= for (ExprStmt Expression ; ExprStmt) Statement
ReturnStmt ::= return Expression ;
PrintStmt ::= print ( ExprList ) ;
ExprStmt ::= Expression ;
ExprList ::= Expression ExprList'               
ExprList' ::= , ExprList 
ExprList' ::= ''
AssignExpr ::= Identifier = Expression           
Expression ::= OrExpr
OrExpr ::= AndExpr OrExpr'                       
OrExpr' ::= || AndExpr OrExpr' 
OrExpr' ::= ''
AndExpr ::= EqExpr AndExpr'                      
AndExpr' ::= AND EqExpr AndExpr'                     
AndExpr' ::= ''
EqExpr ::= RelExpr EqExpr'                       
EqExpr' ::= == RelExpr EqExpr' 
EqExpr' ::= != RelExpr EqExpr' 
EqExpr' ::= ''
RelExpr ::= Expr RelExpr'                        
RelExpr' ::= < Expr RelExpr' 
RelExpr' ::= > Expr RelExpr' 
RelExpr' ::= <= Expr RelExpr' 
RelExpr' ::= >= Expr RelExpr' 
RelExpr' ::= ''
Expr ::= Term Expr'                              
Expr' ::= + Term Expr' 
Expr' ::= - Term Expr' 
Expr' ::= ''
Term ::= Unary Term'                             
Term' ::= * Unary Term' 
Term' ::= / Unary Term' 
Term' ::= % Unary Term' 
Term' ::=  ''
Unary ::= ! Unary                                
Unary ::= - Unary      
Unary ::= Factor
Factor ::= Identifier FactorR                     
Factor ::= IntegerLiteral Factor'
Factor ::= CharLiteral Factor'
Factor ::= StringLiteral Factor'
Factor ::= BooleanLiteral Factor'
Factor ::= ( Expression ) Factor'
FactorR ::= Factor'
FactorR ::= ( ExprList ) Factor'
Factor' ::= [ Expression ] Factor'
Factor' ::= ''